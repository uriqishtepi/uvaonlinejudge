#!/bin/bash

if [ x${1}x == "xx" ] ; then
    echo 'Run needs a parameter the name of the file to execute'
    exit
fi

task=$(echo ${1} | sed 's/.cpp$// ; s/.c$//')
echo "task is $task "

export CFLAGS+='-g ' 
export CPPFLAGS='-g -lm -lcrypt -O2 -pipe -ansi -DONLINE_JUDGE ' 

#check if -o is passed
if [ x${2}x == "x-ox" ]; then
    CPPFLAGS+="-O3 "
fi

#make CPPFLAGS="$CPPFLAGS" ${task}
make ${task}

if [ $? -ne 0 ] ; then 
    exit
fi

IN=${task}.in

if [ ! -f $IN ] ; then 
    exit
fi


OUT=/dev/shm/myout.txt
LINES=`tput lines`

if [ -f $OUT ] ; then rm $OUT; fi

#check if -g is passed
if [ x${2}x == "x-gx" ]; then
    gdb ./${task} -ex "run < $IN"
    exit
fi

#check if -v is passed
if [ x${2}x == "x-vx" ]; then
    valgrind ./${task} < $IN
    exit
fi


echo "running ${task} < $IN"
#./${task} < $IN > $OUT && diff -w -q ${task}.out $OUT || echo run " vimdiff $OUT ${task}.out" to see diff
./${task} < $IN > $OUT && diff -q ${task}.out $OUT || echo run " vimdiff $OUT ${task}.out" to see diff

#could just use more $OUT, but more does not clear the visual when it returns
if [ `wc -l $OUT | awk '{print $1}' ` -gt $((LINES-5)) ] ; then
    less -e $OUT;
else
    cat $OUT;
fi

